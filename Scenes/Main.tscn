[gd_scene load_steps=26 format=2]

[ext_resource path="res://Scenes/Objects/ObjectCampfire.tscn" type="PackedScene" id=1]
[ext_resource path="res://Scenes/Player.tscn" type="PackedScene" id=2]
[ext_resource path="res://Scripts/Objects/Campfire.gd" type="Script" id=3]
[ext_resource path="res://Scripts/Objects/Forest.gd" type="Script" id=4]
[ext_resource path="res://Scenes/ItemRenderer.tscn" type="PackedScene" id=5]
[ext_resource path="res://Scripts/Objects/Ground.gd" type="Script" id=6]
[ext_resource path="res://Scripts/Items.gd" type="Script" id=7]
[ext_resource path="res://game_env.tres" type="Environment" id=8]
[ext_resource path="res://Scripts/ViewportContainer.gd" type="Script" id=9]
[ext_resource path="res://Sprites/crosshair.png" type="Texture" id=10]
[ext_resource path="res://Scripts/GUIs/GUI.gd" type="Script" id=11]
[ext_resource path="res://Sprites/FireIconFilled.png" type="Texture" id=12]
[ext_resource path="res://Scripts/Main.gd" type="Script" id=13]
[ext_resource path="res://Resources/MaterialGround.tres" type="Material" id=14]
[ext_resource path="res://Resources/Noise.tres" type="OpenSimplexNoise" id=15]

[sub_resource type="Animation" id=1]
resource_name = "death_wait"
length = 2.0
tracks/0/type = "value"
tracks/0/path = NodePath("ColorRect:color")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Color( 0, 0, 0, 1 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("ColorRect:visible")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ true ]
}

[sub_resource type="Animation" id=2]
length = 3.0
tracks/0/type = "value"
tracks/0/path = NodePath("ColorRect:color")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 3 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Color( 0, 0, 0, 1 ), Color( 0, 0, 0, 0 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("ColorRect:visible")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 3 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ true, false ]
}

[sub_resource type="VisualShaderNodeVectorClamp" id=3]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0, 0, 0 ), 2, Vector3( 0.1, 0.1, 0.1 ) ]

[sub_resource type="VisualShaderNodeTextureUniform" id=4]
uniform_name = "overlay_viewport"
color_default = 1

[sub_resource type="VisualShaderNodeTexture" id=5]
source = 2

[sub_resource type="VisualShaderNodeIf" id=6]
default_input_values = [ 0, 0.0, 1, 0.0, 2, 1e-05, 3, Vector3( 0, 0, 0 ), 4, Vector3( 1, 1, 1 ), 5, Vector3( 0, 0, 0 ) ]

[sub_resource type="VisualShaderNodeVectorInterp" id=7]

[sub_resource type="VisualShader" id=8]
code = "shader_type canvas_item;
uniform sampler2D overlay_viewport : hint_black;



void vertex() {
// Output:0

}

void fragment() {
// Texture:4
	vec3 n_out4p0;
	float n_out4p1;
	{
		vec4 _tex_read = texture(TEXTURE , UV.xy);
		n_out4p0 = _tex_read.rgb;
		n_out4p1 = _tex_read.a;
	}

// TextureUniform:3
	vec3 n_out3p0;
	float n_out3p1;
	{
		vec4 n_tex_read = texture(overlay_viewport, UV.xy);
		n_out3p0 = n_tex_read.rgb;
		n_out3p1 = n_tex_read.a;
	}

// If:5
	float n_in5p1 = 0.00000;
	float n_in5p2 = 0.00001;
	vec3 n_in5p3 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_in5p4 = vec3(1.00000, 1.00000, 1.00000);
	vec3 n_in5p5 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_out5p0;
	if(abs(n_out3p1 - n_in5p1) < n_in5p2)
	{
		n_out5p0 = n_in5p3;
	}
	else if(n_out3p1 < n_in5p1)
	{
		n_out5p0 = n_in5p5;
	}
	else
	{
		n_out5p0 = n_in5p4;
	}

// VectorClamp:10
	vec3 n_in10p1 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_in10p2 = vec3(0.10000, 0.10000, 0.10000);
	vec3 n_out10p0 = clamp(n_out5p0, n_in10p1, n_in10p2);

// VectorMix:8
	vec3 n_out8p0 = mix(n_out4p0, n_out5p0, n_out10p0);

// Output:0
	COLOR.rgb = n_out8p0;
	COLOR.a = n_out4p1;

}

void light() {
// Output:0

}
"
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 700, 120 )
nodes/fragment/3/node = SubResource( 4 )
nodes/fragment/3/position = Vector2( -520, -100 )
nodes/fragment/4/node = SubResource( 5 )
nodes/fragment/4/position = Vector2( -20, 220 )
nodes/fragment/5/node = SubResource( 6 )
nodes/fragment/5/position = Vector2( -220, -60 )
nodes/fragment/8/node = SubResource( 7 )
nodes/fragment/8/position = Vector2( 440, 0 )
nodes/fragment/10/node = SubResource( 3 )
nodes/fragment/10/position = Vector2( 40, 40 )
nodes/fragment/connections = PoolIntArray( 3, 1, 5, 0, 4, 1, 0, 1, 8, 0, 0, 0, 4, 0, 8, 0, 5, 0, 10, 0, 10, 0, 8, 2, 5, 0, 8, 1 )

[sub_resource type="ShaderMaterial" id=9]
resource_local_to_scene = true
shader = SubResource( 8 )

[sub_resource type="PlaneMesh" id=11]
material = ExtResource( 14 )
size = Vector2( 256, 256 )

[node name="Main" type="Spatial"]
script = ExtResource( 13 )

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
autoplay = "fade_in"
anims/death_wait = SubResource( 1 )
anims/fade_in = SubResource( 2 )

[node name="ViewportContainer" type="ViewportContainer" parent="."]
material = SubResource( 9 )
margin_right = 1280.0
margin_bottom = 720.0
stretch = true
script = ExtResource( 9 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="MainView" type="Viewport" parent="ViewportContainer"]
size = Vector2( 1280, 720 )
handle_input_locally = false
render_direct_to_screen = true
render_target_update_mode = 3
shadow_atlas_size = 8192

[node name="Player" parent="ViewportContainer/MainView" instance=ExtResource( 2 )]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 3.37 )

[node name="GUI" type="MarginContainer" parent="ViewportContainer/MainView"]
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 20.0
margin_top = 20.0
margin_right = -20.0
margin_bottom = -20.0
script = ExtResource( 11 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Side" type="Control" parent="ViewportContainer/MainView/GUI"]
margin_right = 1240.0
margin_bottom = 680.0
grow_vertical = 0
size_flags_vertical = 3

[node name="FireHeight" type="TextureProgress" parent="ViewportContainer/MainView/GUI/Side"]
margin_right = 256.0
margin_bottom = 256.0
max_value = 1.25
step = 0.001
texture_progress = ExtResource( 12 )
fill_mode = 3

[node name="HeldItemIcon" type="ViewportContainer" parent="ViewportContainer/MainView/GUI/Side"]
anchor_top = 1.0
anchor_bottom = 1.0
grow_vertical = 0
rect_min_size = Vector2( 400, 400 )
size_flags_vertical = 9
stretch = true

[node name="ItemRenderer" parent="ViewportContainer/MainView/GUI/Side/HeldItemIcon" instance=ExtResource( 5 )]
handle_input_locally = false
render_target_update_mode = 3

[node name="CrosshairCenter" type="CenterContainer" parent="ViewportContainer/MainView/GUI"]
margin_right = 1240.0
margin_bottom = 680.0
mouse_filter = 2

[node name="Crosshair" type="TextureRect" parent="ViewportContainer/MainView/GUI/CrosshairCenter"]
margin_left = 616.0
margin_top = 336.0
margin_right = 624.0
margin_bottom = 344.0
mouse_filter = 2
texture = ExtResource( 10 )

[node name="Modal" type="CenterContainer" parent="ViewportContainer/MainView/GUI"]
margin_right = 1240.0
margin_bottom = 680.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Ground" type="MeshInstance" parent="ViewportContainer/MainView" groups=[
"ground",
]]
mesh = SubResource( 11 )
material/0 = null
script = ExtResource( 6 )
noise = ExtResource( 15 )
height = 3

[node name="Forest" type="Spatial" parent="ViewportContainer/MainView/Ground"]
script = ExtResource( 4 )

[node name="ObjectCampfire" parent="ViewportContainer/MainView/Ground" instance=ExtResource( 1 )]
script = ExtResource( 3 )

[node name="Items" type="Spatial" parent="ViewportContainer/MainView/Ground"]
script = ExtResource( 7 )

[node name="WorldEnvironment" type="WorldEnvironment" parent="ViewportContainer/MainView"]
environment = ExtResource( 8 )

[node name="ColorRect" type="ColorRect" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0
margin_right = 40.0
margin_bottom = 40.0
color = Color( 0, 0, 0, 1 )
__meta__ = {
"_edit_use_anchors_": false
}
